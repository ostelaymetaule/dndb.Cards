// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using dndb.Cards.Parser.CharacterData.Model;
//
//    var DDBCharacter = DDBCharacter.FromJson(jsonString);
//    Generated with https://app.quicktype.io
//    update on 08.01.2020

namespace dndb.Cards.Parser.CharacterData.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DDBCharacter
    {
        [JsonProperty("character")]
        public Character Character { get; set; }

        [JsonProperty("characterConfiguration")]
        public CharacterConfiguration CharacterConfiguration { get; set; }

        [JsonProperty("characterData")]
        public DDBCharacter CharacterData { get; set; }
    }

    public partial class Character
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("readonlyUrl")]
        public Uri ReadonlyUrl { get; set; }

        [JsonProperty("avatarUrl")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("frameAvatarUrl")]
        public string FrameAvatarUrl { get; set; }

        [JsonProperty("backdropAvatarUrl")]
        public string BackdropAvatarUrl { get; set; }

        [JsonProperty("smallBackdropAvatarUrl")]
        public string SmallBackdropAvatarUrl { get; set; }

        [JsonProperty("largeBackdropAvatarUrl")]
        public string LargeBackdropAvatarUrl { get; set; }

        [JsonProperty("thumbnailBackdropAvatarUrl")]
        public string ThumbnailBackdropAvatarUrl { get; set; }

        [JsonProperty("defaultBackdrop")]
        public DefaultBackdrop DefaultBackdrop { get; set; }

        [JsonProperty("avatarId")]
        public long AvatarId { get; set; }

        [JsonProperty("frameAvatarId")]
        public object FrameAvatarId { get; set; }

        [JsonProperty("backdropAvatarId")]
        public object BackdropAvatarId { get; set; }

        [JsonProperty("smallBackdropAvatarId")]
        public object SmallBackdropAvatarId { get; set; }

        [JsonProperty("largeBackdropAvatarId")]
        public object LargeBackdropAvatarId { get; set; }

        [JsonProperty("thumbnailAvatarId")]
        public object ThumbnailAvatarId { get; set; }

        [JsonProperty("themeColorId")]
        public object ThemeColorId { get; set; }

        [JsonProperty("themeColor")]
        public object ThemeColor { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("socialName")]
        public string SocialName { get; set; }

        [JsonProperty("gender")]
        public object Gender { get; set; }

        [JsonProperty("faith")]
        public object Faith { get; set; }

        [JsonProperty("age")]
        public object Age { get; set; }

        [JsonProperty("hair")]
        public object Hair { get; set; }

        [JsonProperty("eyes")]
        public object Eyes { get; set; }

        [JsonProperty("skin")]
        public object Skin { get; set; }

        [JsonProperty("height")]
        public object Height { get; set; }

        [JsonProperty("weight")]
        public object Weight { get; set; }

        [JsonProperty("inspiration")]
        public bool Inspiration { get; set; }

        [JsonProperty("baseHitPoints")]
        public long BaseHitPoints { get; set; }

        [JsonProperty("bonusHitPoints")]
        public object BonusHitPoints { get; set; }

        [JsonProperty("overrideHitPoints")]
        public object OverrideHitPoints { get; set; }

        [JsonProperty("removedHitPoints")]
        public long RemovedHitPoints { get; set; }

        [JsonProperty("temporaryHitPoints")]
        public long TemporaryHitPoints { get; set; }

        [JsonProperty("currentXp")]
        public long CurrentXp { get; set; }

        [JsonProperty("alignmentId")]
        public object AlignmentId { get; set; }

        [JsonProperty("lifestyleId")]
        public object LifestyleId { get; set; }

        [JsonProperty("stats")]
        public List<Stat> Stats { get; set; }

        [JsonProperty("bonusStats")]
        public List<Stat> BonusStats { get; set; }

        [JsonProperty("overrideStats")]
        public List<Stat> OverrideStats { get; set; }

        [JsonProperty("background")]
        public CharacterBackground Background { get; set; }

        [JsonProperty("race")]
        public Race Race { get; set; }

        [JsonProperty("notes")]
        public Notes Notes { get; set; }

        [JsonProperty("traits")]
        public Traits Traits { get; set; }

        [JsonProperty("preferences")]
        public Preferences Preferences { get; set; }

        [JsonProperty("lifestyle")]
        public object Lifestyle { get; set; }

        [JsonProperty("inventory")]
        public List<object> Inventory { get; set; }

        [JsonProperty("currencies")]
        public Currencies Currencies { get; set; }

        [JsonProperty("classes")]
        public List<CharacterClass> Classes { get; set; }

        [JsonProperty("feats")]
        public List<object> Feats { get; set; }

        [JsonProperty("customDefenseAdjustments")]
        public List<object> CustomDefenseAdjustments { get; set; }

        [JsonProperty("customSenses")]
        public List<object> CustomSenses { get; set; }

        [JsonProperty("customSpeeds")]
        public List<object> CustomSpeeds { get; set; }

        [JsonProperty("customProficiencies")]
        public List<object> CustomProficiencies { get; set; }

        [JsonProperty("spellDefenses")]
        public object SpellDefenses { get; set; }

        [JsonProperty("customActions")]
        public List<object> CustomActions { get; set; }

        [JsonProperty("characterValues")]
        public List<object> CharacterValues { get; set; }

        [JsonProperty("conditions")]
        public List<object> Conditions { get; set; }

        [JsonProperty("deathSaves")]
        public DeathSaves DeathSaves { get; set; }

        [JsonProperty("adjustmentXp")]
        public object AdjustmentXp { get; set; }

        [JsonProperty("spellSlots")]
        public List<PactMagic> SpellSlots { get; set; }

        [JsonProperty("pactMagic")]
        public List<PactMagic> PactMagic { get; set; }

        [JsonProperty("activeSourceCategories")]
        public List<long> ActiveSourceCategories { get; set; }

        [JsonProperty("spells")]
        public Spells Spells { get; set; }

        [JsonProperty("options")]
        public Tions Options { get; set; }

        [JsonProperty("choices")]
        public Choices Choices { get; set; }

        [JsonProperty("actions")]
        public Tions Actions { get; set; }

        [JsonProperty("modifiers")]
        public Modifiers Modifiers { get; set; }

        [JsonProperty("classSpells")]
        public List<ClassSpell> ClassSpells { get; set; }

        [JsonProperty("customItems")]
        public List<object> CustomItems { get; set; }

        [JsonProperty("campaign")]
        public object Campaign { get; set; }

        [JsonProperty("creatures")]
        public List<object> Creatures { get; set; }

        [JsonProperty("vehicles")]
        public List<object> Vehicles { get; set; }

        [JsonProperty("components")]
        public List<object> Components { get; set; }
    }

    public partial class Tions
    {
        [JsonProperty("race")]
        public List<RaceElement> Race { get; set; }

        [JsonProperty("class")]
        public List<RaceElement> Class { get; set; }

        [JsonProperty("feat")]
        public List<object> Feat { get; set; }
    }

    public partial class RaceElement
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("limitedUse")]
        public ClassLimitedUse LimitedUse { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("snippet")]
        public string Snippet { get; set; }

        [JsonProperty("abilityModifierStatId")]
        public object AbilityModifierStatId { get; set; }

        [JsonProperty("onMissDescription")]
        public string OnMissDescription { get; set; }

        [JsonProperty("saveFailDescription")]
        public string SaveFailDescription { get; set; }

        [JsonProperty("saveSuccessDescription")]
        public string SaveSuccessDescription { get; set; }

        [JsonProperty("saveStatId")]
        public long? SaveStatId { get; set; }

        [JsonProperty("fixedSaveDc")]
        public object FixedSaveDc { get; set; }

        [JsonProperty("attackTypeRange")]
        public long? AttackTypeRange { get; set; }

        [JsonProperty("actionType")]
        public long ActionType { get; set; }

        [JsonProperty("attackSubtype")]
        public object AttackSubtype { get; set; }

        [JsonProperty("dice")]
        public WealthDice Dice { get; set; }

        [JsonProperty("value")]
        public object Value { get; set; }

        [JsonProperty("damageTypeId")]
        public long? DamageTypeId { get; set; }

        [JsonProperty("isMartialArts")]
        public bool IsMartialArts { get; set; }

        [JsonProperty("isProficient")]
        public bool IsProficient { get; set; }

        [JsonProperty("spellRangeType")]
        public object SpellRangeType { get; set; }

        [JsonProperty("displayAsAttack")]
        public object DisplayAsAttack { get; set; }

        [JsonProperty("range")]
        public RaceRange Range { get; set; }

        [JsonProperty("activation")]
        public Activation Activation { get; set; }

        [JsonProperty("attackCustomData")]
        public AttackCustomData AttackCustomData { get; set; }

        [JsonProperty("componentId")]
        public long ComponentId { get; set; }

        [JsonProperty("componentTypeId")]
        public long ComponentTypeId { get; set; }
    }

    public partial class Activation
    {
        [JsonProperty("activationTime")]
        public long? ActivationTime { get; set; }

        [JsonProperty("activationType")]
        public long? ActivationType { get; set; }
    }

    public partial class AttackCustomData
    {
        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("notes")]
        public object Notes { get; set; }

        [JsonProperty("damageBonus")]
        public object DamageBonus { get; set; }

        [JsonProperty("toHitBonus")]
        public object ToHitBonus { get; set; }

        [JsonProperty("toHit")]
        public object ToHit { get; set; }

        [JsonProperty("isOffhand")]
        public object IsOffhand { get; set; }

        [JsonProperty("isSilver")]
        public object IsSilver { get; set; }

        [JsonProperty("isAdamantine")]
        public object IsAdamantine { get; set; }

        [JsonProperty("isProficient")]
        public object IsProficient { get; set; }

        [JsonProperty("saveDcBonus")]
        public object SaveDcBonus { get; set; }

        [JsonProperty("saveDc")]
        public object SaveDc { get; set; }

        [JsonProperty("weight")]
        public object Weight { get; set; }

        [JsonProperty("displayAsAttack")]
        public object DisplayAsAttack { get; set; }

        [JsonProperty("cost")]
        public object Cost { get; set; }
    }

    public partial class WealthDice
    {
        [JsonProperty("diceCount")]
        public long? DiceCount { get; set; }

        [JsonProperty("diceValue")]
        public long? DiceValue { get; set; }

        [JsonProperty("diceMultiplier")]
        public long? DiceMultiplier { get; set; }

        [JsonProperty("fixedValue")]
        public long? FixedValue { get; set; }

        [JsonProperty("diceString")]
        public string DiceString { get; set; }
    }

    public partial class ClassLimitedUse
    {
        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("statModifierUsesId")]
        public object StatModifierUsesId { get; set; }

        [JsonProperty("resetType")]
        public long ResetType { get; set; }

        [JsonProperty("numberUsed")]
        public long NumberUsed { get; set; }

        [JsonProperty("minNumberConsumed")]
        public long MinNumberConsumed { get; set; }

        [JsonProperty("maxNumberConsumed")]
        public long MaxNumberConsumed { get; set; }

        [JsonProperty("maxUses")]
        public long MaxUses { get; set; }

        [JsonProperty("operator")]
        public long Operator { get; set; }
    }

    public partial class RaceRange
    {
        [JsonProperty("range")]
        public long? Range { get; set; }

        [JsonProperty("longRange")]
        public object LongRange { get; set; }

        [JsonProperty("aoeType")]
        public object AoeType { get; set; }

        [JsonProperty("aoeSize")]
        public object AoeSize { get; set; }

        [JsonProperty("hasAoeSpecialDescription")]
        public bool HasAoeSpecialDescription { get; set; }
    }

    public partial class CharacterBackground
    {
        [JsonProperty("hasCustomBackground")]
        public bool HasCustomBackground { get; set; }

        [JsonProperty("definition")]
        public DefinitionElement Definition { get; set; }

        [JsonProperty("customBackground")]
        public CustomBackground CustomBackground { get; set; }
    }

    public partial class CustomBackground
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("description")]
        public object Description { get; set; }

        [JsonProperty("featuresBackground")]
        public object FeaturesBackground { get; set; }

        [JsonProperty("characteristicsBackground")]
        public object CharacteristicsBackground { get; set; }

        [JsonProperty("backgroundType")]
        public object BackgroundType { get; set; }
    }

    public partial class DefinitionElement
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("snippet")]
        public string Snippet { get; set; }

        [JsonProperty("shortDescription")]
        public string ShortDescription { get; set; }

        [JsonProperty("skillProficienciesDescription")]
        public string SkillProficienciesDescription { get; set; }

        [JsonProperty("toolProficienciesDescription")]
        public string ToolProficienciesDescription { get; set; }

        [JsonProperty("languagesDescription")]
        public string LanguagesDescription { get; set; }

        [JsonProperty("equipmentDescription")]
        public string EquipmentDescription { get; set; }

        [JsonProperty("featureName")]
        public string FeatureName { get; set; }

        [JsonProperty("featureDescription")]
        public string FeatureDescription { get; set; }

        [JsonProperty("avatarUrl")]
        public object AvatarUrl { get; set; }

        [JsonProperty("largeAvatarUrl")]
        public object LargeAvatarUrl { get; set; }

        [JsonProperty("suggestedCharacteristicsDescription")]
        public string SuggestedCharacteristicsDescription { get; set; }

        [JsonProperty("suggestedProficiencies")]
        public List<string> SuggestedProficiencies { get; set; }

        [JsonProperty("suggestedLanguages")]
        public List<object> SuggestedLanguages { get; set; }

        [JsonProperty("organization")]
        public Organization Organization { get; set; }

        [JsonProperty("contractsDescription")]
        public string ContractsDescription { get; set; }

        [JsonProperty("spellsPreDescription")]
        public string SpellsPreDescription { get; set; }

        [JsonProperty("spellsPostDescription")]
        public string SpellsPostDescription { get; set; }

        [JsonProperty("personalityTraits")]
        public List<Bond> PersonalityTraits { get; set; }

        [JsonProperty("ideals")]
        public List<Bond> Ideals { get; set; }

        [JsonProperty("bonds")]
        public List<Bond> Bonds { get; set; }

        [JsonProperty("flaws")]
        public List<Bond> Flaws { get; set; }
    }

    public partial class Bond
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("diceRoll")]
        public long DiceRoll { get; set; }
    }

    public partial class Organization
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class Stat
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("value")]
        public long? Value { get; set; }
    }

    public partial class Choices
    {
        [JsonProperty("race")]
        public List<object> Race { get; set; }

        [JsonProperty("class")]
        public List<ChoicesBackground> Class { get; set; }

        [JsonProperty("background")]
        public List<ChoicesBackground> Background { get; set; }

        [JsonProperty("feat")]
        public List<object> Feat { get; set; }
    }

    public partial class ChoicesBackground
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("parentChoiceId")]
        public object ParentChoiceId { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("subType")]
        public long? SubType { get; set; }

        [JsonProperty("optionValue")]
        public long OptionValue { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("isOptional")]
        public bool IsOptional { get; set; }

        [JsonProperty("isInfinite")]
        public bool IsInfinite { get; set; }

        [JsonProperty("defaultSubtypes")]
        public List<string> DefaultSubtypes { get; set; }

        [JsonProperty("options")]
        public List<Option> Options { get; set; }

        [JsonProperty("componentId")]
        public long ComponentId { get; set; }

        [JsonProperty("componentTypeId")]
        public long ComponentTypeId { get; set; }
    }

    public partial class Option
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("description")]
        public object Description { get; set; }
    }

    public partial class ClassSpell
    {
        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("characterClassId")]
        public long CharacterClassId { get; set; }

        [JsonProperty("spells")]
        public List<Spell> Spells { get; set; }
    }

    public partial class Spell
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("definition")]
        public SpellDefinition Definition { get; set; }

        [JsonProperty("prepared")]
        public bool Prepared { get; set; }

        [JsonProperty("countsAsKnownSpell")]
        public bool CountsAsKnownSpell { get; set; }

        [JsonProperty("usesSpellSlot")]
        public bool UsesSpellSlot { get; set; }

        [JsonProperty("castAtLevel")]
        public object CastAtLevel { get; set; }

        [JsonProperty("alwaysPrepared")]
        public bool AlwaysPrepared { get; set; }

        [JsonProperty("restriction")]
        public object Restriction { get; set; }

        [JsonProperty("spellCastingAbilityId")]
        public object SpellCastingAbilityId { get; set; }

        [JsonProperty("displayAsAttack")]
        public object DisplayAsAttack { get; set; }

        [JsonProperty("additionalDescription")]
        public object AdditionalDescription { get; set; }

        [JsonProperty("castOnlyAsRitual")]
        public bool CastOnlyAsRitual { get; set; }

        [JsonProperty("ritualCastingType")]
        public object RitualCastingType { get; set; }

        [JsonProperty("range")]
        public DefinitionRange Range { get; set; }

        [JsonProperty("activation")]
        public Activation Activation { get; set; }

        [JsonProperty("baseLevelAtWill")]
        public bool BaseLevelAtWill { get; set; }

        [JsonProperty("atWillLimitedUseLevel")]
        public object AtWillLimitedUseLevel { get; set; }

        [JsonProperty("componentId")]
        public long ComponentId { get; set; }

        [JsonProperty("componentTypeId")]
        public long ComponentTypeId { get; set; }
    }

    public partial class SpellDefinition
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("school")]
        public string School { get; set; }

        [JsonProperty("duration")]
        public Duration Duration { get; set; }

        [JsonProperty("activation")]
        public Activation Activation { get; set; }

        [JsonProperty("range")]
        public DefinitionRange Range { get; set; }

        [JsonProperty("asPartOfWeaponAttack")]
        public bool AsPartOfWeaponAttack { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("snippet")]
        public string Snippet { get; set; }

        [JsonProperty("concentration")]
        public bool Concentration { get; set; }

        [JsonProperty("ritual")]
        public bool Ritual { get; set; }

        [JsonProperty("rangeArea")]
        public object RangeArea { get; set; }

        [JsonProperty("damageEffect")]
        public object DamageEffect { get; set; }

        [JsonProperty("components")]
        public List<long> Components { get; set; }

        [JsonProperty("componentsDescription")]
        public string ComponentsDescription { get; set; }

        [JsonProperty("saveDcAbilityId")]
        public long? SaveDcAbilityId { get; set; }

        [JsonProperty("healing")]
        public string Healing { get; set; }

        [JsonProperty("healingDice")]
        public object HealingDice { get; set; }

        [JsonProperty("tempHpDice")]
        public object TempHpDice { get; set; }

        [JsonProperty("attackType")]
        public long? AttackType { get; set; }

        [JsonProperty("canCastAtHigherLevel")]
        public bool CanCastAtHigherLevel { get; set; }

        [JsonProperty("isHomebrew")]
        public bool IsHomebrew { get; set; }

        [JsonProperty("version")]
        public object Version { get; set; }

        [JsonProperty("sourceId")]
        public long SourceId { get; set; }

        [JsonProperty("sourcePageNumber")]
        public long SourcePageNumber { get; set; }

        [JsonProperty("requiresSavingThrow")]
        public bool RequiresSavingThrow { get; set; }

        [JsonProperty("requiresAttackRoll")]
        public bool RequiresAttackRoll { get; set; }

        [JsonProperty("atHigherLevels")]
        public AtHigherLevels AtHigherLevels { get; set; }

        [JsonProperty("modifiers")]
        public List<Modifier> Modifiers { get; set; }

        [JsonProperty("conditions")]
        public List<Condition> Conditions { get; set; }

        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

        [JsonProperty("castingTimeDescription")]
        public string CastingTimeDescription { get; set; }
    }

    public partial class AtHigherLevels
    {
        [JsonProperty("scaleType")]
        public ScaleType? ScaleType { get; set; }

        [JsonProperty("higherLevelDefinitions")]
        public List<HigherLevelDefinition> HigherLevelDefinitions { get; set; }

        [JsonProperty("additionalAttacks")]
        public List<object> AdditionalAttacks { get; set; }

        [JsonProperty("additionalTargets")]
        public List<AdditionalTarget> AdditionalTargets { get; set; }

        [JsonProperty("areaOfEffect")]
        public List<AreaOfEffect> AreaOfEffect { get; set; }

        [JsonProperty("duration")]
        public List<object> Duration { get; set; }

        [JsonProperty("creatures")]
        public List<object> Creatures { get; set; }

        [JsonProperty("special")]
        public List<object> Special { get; set; }

        [JsonProperty("points")]
        public List<Point> Points { get; set; }
    }

    public partial class AdditionalTarget
    {
        [JsonProperty("targets")]
        public long Targets { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("description")]
        public AdditionalTargetDescription Description { get; set; }
    }

    public partial class AreaOfEffect
    {
        [JsonProperty("extendedAOE")]
        public long ExtendedAoe { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("description")]
        public AreaOfEffectDescription Description { get; set; }
    }

    public partial class HigherLevelDefinition
    {
        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("typeId")]
        public long TypeId { get; set; }

        [JsonProperty("dice")]
        public WealthDice Dice { get; set; }

        [JsonProperty("value")]
        public long? Value { get; set; }

        [JsonProperty("details")]
        public string Details { get; set; }
    }

    public partial class Point
    {
        [JsonProperty("die")]
        public WealthDice Die { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class Condition
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("conditionId")]
        public long ConditionId { get; set; }

        [JsonProperty("conditionDuration")]
        public long ConditionDuration { get; set; }

        [JsonProperty("durationUnit")]
        public DurationUnit DurationUnit { get; set; }

        [JsonProperty("exception")]
        public string Exception { get; set; }
    }

    public partial class Duration
    {
        [JsonProperty("durationInterval")]
        public long? DurationInterval { get; set; }

        [JsonProperty("durationUnit")]
        public DurationUnit? DurationUnit { get; set; }

        [JsonProperty("durationType")]
        public DurationType DurationType { get; set; }
    }

    public partial class Modifier
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public ModifierType Type { get; set; }

        [JsonProperty("subType")]
        public string SubType { get; set; }

        [JsonProperty("die")]
        public WealthDice Die { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("durationUnit")]
        public object DurationUnit { get; set; }

        [JsonProperty("restriction")]
        public string Restriction { get; set; }

        [JsonProperty("friendlyTypeName")]
        public ModifierFriendlyTypeName FriendlyTypeName { get; set; }

        [JsonProperty("friendlySubtypeName")]
        public string FriendlySubtypeName { get; set; }

        [JsonProperty("usePrimaryStat")]
        public bool UsePrimaryStat { get; set; }

        [JsonProperty("atHigherLevels")]
        public AtHigherLevels AtHigherLevels { get; set; }
    }

    public partial class DefinitionRange
    {
        [JsonProperty("origin")]
        public Origin Origin { get; set; }

        [JsonProperty("rangeValue")]
        public long? RangeValue { get; set; }

        [JsonProperty("aoeType")]
        public AoeType? AoeType { get; set; }

        [JsonProperty("aoeValue")]
        public long? AoeValue { get; set; }
    }

    public partial class CharacterClass
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("isStartingClass")]
        public bool IsStartingClass { get; set; }

        [JsonProperty("hitDiceUsed")]
        public long HitDiceUsed { get; set; }

        [JsonProperty("definition")]
        public Subclass Definition { get; set; }

        [JsonProperty("subclassDefinition")]
        public Subclass SubclassDefinition { get; set; }

        [JsonProperty("classFeatures")]
        public List<ClassClassFeature> ClassFeatures { get; set; }
    }

    public partial class ClassClassFeature
    {
        [JsonProperty("definition")]
        public ClassFeatureDefinition Definition { get; set; }

        [JsonProperty("levelScale")]
        public LevelScale LevelScale { get; set; }
    }

    public partial class ClassFeatureDefinition
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("displayOrder")]
        public long DisplayOrder { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("snippet")]
        public string Snippet { get; set; }

        [JsonProperty("activation")]
        public Activation Activation { get; set; }

        [JsonProperty("multiClassDescription")]
        public string MultiClassDescription { get; set; }

        [JsonProperty("requiredLevel")]
        public long RequiredLevel { get; set; }

        [JsonProperty("isSubClassFeature")]
        public bool IsSubClassFeature { get; set; }

        [JsonProperty("limitedUse")]
        public List<LimitedUseElement> LimitedUse { get; set; }

        [JsonProperty("hideInBuilder")]
        public bool HideInBuilder { get; set; }

        [JsonProperty("hideInSheet")]
        public bool HideInSheet { get; set; }

        [JsonProperty("sourceId")]
        public long SourceId { get; set; }

        [JsonProperty("sourcePageNumber")]
        public long? SourcePageNumber { get; set; }

        [JsonProperty("creatureRules")]
        public List<CreatureRule> CreatureRules { get; set; }

        [JsonProperty("infusionRules")]
        public List<object> InfusionRules { get; set; }
    }

    public partial class CreatureRule
    {
        [JsonProperty("creatureGroupId")]
        public long CreatureGroupId { get; set; }

        [JsonProperty("monsterTypeId")]
        public long? MonsterTypeId { get; set; }

        [JsonProperty("maxChallengeRatingId")]
        public long? MaxChallengeRatingId { get; set; }

        [JsonProperty("levelDivisor")]
        public object LevelDivisor { get; set; }

        [JsonProperty("monsterIds")]
        public List<long> MonsterIds { get; set; }

        [JsonProperty("movementIds")]
        public List<long> MovementIds { get; set; }

        [JsonProperty("sizeIds")]
        public List<object> SizeIds { get; set; }
    }

    public partial class LimitedUseElement
    {
        [JsonProperty("level")]
        public object Level { get; set; }

        [JsonProperty("uses")]
        public long Uses { get; set; }
    }

    public partial class LevelScale
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("dice")]
        public WealthDice Dice { get; set; }

        [JsonProperty("fixedValue")]
        public object FixedValue { get; set; }
    }

    public partial class Subclass
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("equipmentDescription")]
        public string EquipmentDescription { get; set; }

        [JsonProperty("parentClassId")]
        public long? ParentClassId { get; set; }

        [JsonProperty("avatarUrl")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("largeAvatarUrl")]
        public Uri LargeAvatarUrl { get; set; }

        [JsonProperty("portraitAvatarUrl")]
        public Uri PortraitAvatarUrl { get; set; }

        [JsonProperty("moreDetailsUrl")]
        public string MoreDetailsUrl { get; set; }

        [JsonProperty("spellCastingAbilityId")]
        public long SpellCastingAbilityId { get; set; }

        [JsonProperty("sourceIds")]
        public List<long> SourceIds { get; set; }

        [JsonProperty("hitDice")]
        public long HitDice { get; set; }

        [JsonProperty("classFeatures")]
        public List<SubclassClassFeature> ClassFeatures { get; set; }

        [JsonProperty("wealthDice")]
        public WealthDice WealthDice { get; set; }

        [JsonProperty("canCastSpells")]
        public bool CanCastSpells { get; set; }

        [JsonProperty("knowsAllSpells")]
        public bool KnowsAllSpells { get; set; }

        [JsonProperty("spellPrepareType")]
        public long SpellPrepareType { get; set; }

        [JsonProperty("spellContainerName")]
        public object SpellContainerName { get; set; }

        [JsonProperty("sourceId")]
        public long SourceId { get; set; }

        [JsonProperty("sourcePageNumber")]
        public long? SourcePageNumber { get; set; }

        [JsonProperty("primaryAbilities")]
        public List<long> PrimaryAbilities { get; set; }

        [JsonProperty("spellRules")]
        public SpellRules SpellRules { get; set; }

        [JsonProperty("prerequisites")]
        public List<Prerequisite> Prerequisites { get; set; }
    }

    public partial class SubclassClassFeature
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("prerequisite")]
        public object Prerequisite { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("requiredLevel")]
        public long RequiredLevel { get; set; }

        [JsonProperty("displayOrder")]
        public long DisplayOrder { get; set; }
    }

    public partial class Prerequisite
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("prerequisiteMappings")]
        public List<PrerequisiteMapping> PrerequisiteMappings { get; set; }
    }

    public partial class PrerequisiteMapping
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityId")]
        public long? EntityId { get; set; }

        [JsonProperty("entityTypeId")]
        public long? EntityTypeId { get; set; }

        [JsonProperty("type")]
        public PrerequisiteMappingType Type { get; set; }

        [JsonProperty("subType")]
        public string SubType { get; set; }

        [JsonProperty("value")]
        public long? Value { get; set; }

        [JsonProperty("friendlyTypeName")]
        public PrerequisiteMappingFriendlyTypeName FriendlyTypeName { get; set; }

        [JsonProperty("friendlySubTypeName")]
        public string FriendlySubTypeName { get; set; }
    }

    public partial class SpellRules
    {
        [JsonProperty("multiClassSpellSlotDivisor")]
        public long MultiClassSpellSlotDivisor { get; set; }

        [JsonProperty("multiClassSpellSlotRounding")]
        public long MultiClassSpellSlotRounding { get; set; }

        [JsonProperty("isRitualSpellCaster")]
        public bool IsRitualSpellCaster { get; set; }

        [JsonProperty("levelCantripsKnownMaxes")]
        public List<long> LevelCantripsKnownMaxes { get; set; }

        [JsonProperty("levelSpellKnownMaxes")]
        public object LevelSpellKnownMaxes { get; set; }

        [JsonProperty("levelSpellSlots")]
        public List<List<long>> LevelSpellSlots { get; set; }
    }

    public partial class Currencies
    {
        [JsonProperty("cp")]
        public long Cp { get; set; }

        [JsonProperty("sp")]
        public long Sp { get; set; }

        [JsonProperty("gp")]
        public long Gp { get; set; }

        [JsonProperty("ep")]
        public long Ep { get; set; }

        [JsonProperty("pp")]
        public long Pp { get; set; }
    }

    public partial class DeathSaves
    {
        [JsonProperty("failCount")]
        public object FailCount { get; set; }

        [JsonProperty("successCount")]
        public object SuccessCount { get; set; }

        [JsonProperty("isStabilized")]
        public bool IsStabilized { get; set; }
    }

    public partial class DefaultBackdrop
    {
        [JsonProperty("backdropAvatarUrl")]
        public Uri BackdropAvatarUrl { get; set; }

        [JsonProperty("smallBackdropAvatarUrl")]
        public Uri SmallBackdropAvatarUrl { get; set; }

        [JsonProperty("largeBackdropAvatarUrl")]
        public Uri LargeBackdropAvatarUrl { get; set; }

        [JsonProperty("thumbnailBackdropAvatarUrl")]
        public Uri ThumbnailBackdropAvatarUrl { get; set; }
    }

    public partial class Modifiers
    {
        [JsonProperty("race")]
        public List<RaceClass> Race { get; set; }

        [JsonProperty("class")]
        public List<RaceClass> Class { get; set; }

        [JsonProperty("background")]
        public List<RaceClass> Background { get; set; }

        [JsonProperty("item")]
        public List<object> Item { get; set; }

        [JsonProperty("feat")]
        public List<object> Feat { get; set; }

        [JsonProperty("condition")]
        public List<object> Condition { get; set; }
    }

    public partial class RaceClass
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("entityId")]
        public long? EntityId { get; set; }

        [JsonProperty("entityTypeId")]
        public long? EntityTypeId { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("subType")]
        public string SubType { get; set; }

        [JsonProperty("dice")]
        public object Dice { get; set; }

        [JsonProperty("restriction")]
        public string Restriction { get; set; }

        [JsonProperty("statId")]
        public object StatId { get; set; }

        [JsonProperty("requiresAttunement")]
        public bool RequiresAttunement { get; set; }

        [JsonProperty("duration")]
        public object Duration { get; set; }

        [JsonProperty("friendlyTypeName")]
        public string FriendlyTypeName { get; set; }

        [JsonProperty("friendlySubtypeName")]
        public string FriendlySubtypeName { get; set; }

        [JsonProperty("isGranted")]
        public bool IsGranted { get; set; }

        [JsonProperty("bonusTypes")]
        public List<object> BonusTypes { get; set; }

        [JsonProperty("value")]
        public long? Value { get; set; }

        [JsonProperty("componentId")]
        public long ComponentId { get; set; }

        [JsonProperty("componentTypeId")]
        public long ComponentTypeId { get; set; }
    }

    public partial class Notes
    {
        [JsonProperty("allies")]
        public object Allies { get; set; }

        [JsonProperty("personalPossessions")]
        public object PersonalPossessions { get; set; }

        [JsonProperty("otherHoldings")]
        public object OtherHoldings { get; set; }

        [JsonProperty("organizations")]
        public object Organizations { get; set; }

        [JsonProperty("enemies")]
        public object Enemies { get; set; }

        [JsonProperty("backstory")]
        public object Backstory { get; set; }

        [JsonProperty("otherNotes")]
        public object OtherNotes { get; set; }
    }

    public partial class PactMagic
    {
        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("used")]
        public long Used { get; set; }

        [JsonProperty("available")]
        public long Available { get; set; }
    }

    public partial class Preferences
    {
        [JsonProperty("useHomebrewContent")]
        public bool UseHomebrewContent { get; set; }

        [JsonProperty("progressionType")]
        public long ProgressionType { get; set; }

        [JsonProperty("encumbranceType")]
        public long EncumbranceType { get; set; }

        [JsonProperty("ignoreCoinWeight")]
        public bool IgnoreCoinWeight { get; set; }

        [JsonProperty("hitPointType")]
        public long HitPointType { get; set; }

        [JsonProperty("showUnarmedStrike")]
        public bool ShowUnarmedStrike { get; set; }

        [JsonProperty("showCompanions")]
        public bool ShowCompanions { get; set; }

        [JsonProperty("showWildShape")]
        public bool ShowWildShape { get; set; }

        [JsonProperty("primarySense")]
        public long PrimarySense { get; set; }

        [JsonProperty("primaryMovement")]
        public long PrimaryMovement { get; set; }

        [JsonProperty("privacyType")]
        public long PrivacyType { get; set; }

        [JsonProperty("sharingType")]
        public long SharingType { get; set; }

        [JsonProperty("abilityScoreDisplayType")]
        public long AbilityScoreDisplayType { get; set; }

        [JsonProperty("enforceFeatRules")]
        public bool EnforceFeatRules { get; set; }

        [JsonProperty("enforceMulticlassRules")]
        public bool EnforceMulticlassRules { get; set; }
    }

    public partial class Race
    {
        [JsonProperty("entityRaceId")]
        public long EntityRaceId { get; set; }

        [JsonProperty("entityRaceTypeId")]
        public long EntityRaceTypeId { get; set; }

        [JsonProperty("fullName")]
        public string FullName { get; set; }

        [JsonProperty("baseRaceId")]
        public long BaseRaceId { get; set; }

        [JsonProperty("baseRaceTypeId")]
        public long BaseRaceTypeId { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("avatarUrl")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("largeAvatarUrl")]
        public Uri LargeAvatarUrl { get; set; }

        [JsonProperty("portraitAvatarUrl")]
        public Uri PortraitAvatarUrl { get; set; }

        [JsonProperty("moreDetailsUrl")]
        public string MoreDetailsUrl { get; set; }

        [JsonProperty("isHomebrew")]
        public bool IsHomebrew { get; set; }

        [JsonProperty("sourceIds")]
        public List<long> SourceIds { get; set; }

        [JsonProperty("groupIds")]
        public List<long> GroupIds { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("subRaceShortName")]
        public object SubRaceShortName { get; set; }

        [JsonProperty("baseName")]
        public string BaseName { get; set; }

        [JsonProperty("racialTraits")]
        public List<RacialTrait> RacialTraits { get; set; }

        [JsonProperty("weightSpeeds")]
        public WeightSpeeds WeightSpeeds { get; set; }

        [JsonProperty("featIds")]
        public List<object> FeatIds { get; set; }

        [JsonProperty("size")]
        public string Size { get; set; }

        [JsonProperty("sizeId")]
        public long SizeId { get; set; }
    }

    public partial class RacialTrait
    {
        [JsonProperty("definition")]
        public Feat Definition { get; set; }
    }

    public partial class Feat
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("displayOrder", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisplayOrder { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("snippet")]
        public string Snippet { get; set; }

        [JsonProperty("hideInBuilder", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideInBuilder { get; set; }

        [JsonProperty("hideInSheet", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideInSheet { get; set; }

        [JsonProperty("activation")]
        public Activation Activation { get; set; }

        [JsonProperty("sourceId")]
        public long SourceId { get; set; }

        [JsonProperty("sourcePageNumber")]
        public long? SourcePageNumber { get; set; }

        [JsonProperty("creatureRules")]
        public List<object> CreatureRules { get; set; }

        [JsonProperty("features")]
        public object Features { get; set; }

        [JsonProperty("prerequisites", NullValueHandling = NullValueHandling.Ignore)]
        public List<Prerequisite> Prerequisites { get; set; }
    }

    public partial class WeightSpeeds
    {
        [JsonProperty("normal")]
        public Normal Normal { get; set; }

        [JsonProperty("encumbered")]
        public object Encumbered { get; set; }

        [JsonProperty("heavilyEncumbered")]
        public object HeavilyEncumbered { get; set; }

        [JsonProperty("pushDragLift")]
        public object PushDragLift { get; set; }

        [JsonProperty("override")]
        public object Override { get; set; }
    }

    public partial class Normal
    {
        [JsonProperty("walk")]
        public long Walk { get; set; }

        [JsonProperty("fly")]
        public long Fly { get; set; }

        [JsonProperty("burrow")]
        public long Burrow { get; set; }

        [JsonProperty("swim")]
        public long Swim { get; set; }

        [JsonProperty("climb")]
        public long Climb { get; set; }
    }

    public partial class Spells
    {
        [JsonProperty("race")]
        public List<object> Race { get; set; }

        [JsonProperty("class")]
        public List<SpellsClass> Class { get; set; }

        [JsonProperty("item")]
        public List<object> Item { get; set; }

        [JsonProperty("feat")]
        public List<object> Feat { get; set; }
    }

    public partial class SpellsClass
    {
        [JsonProperty("overrideSaveDc")]
        public object OverrideSaveDc { get; set; }

        [JsonProperty("limitedUse")]
        public object LimitedUse { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("entityTypeId")]
        public long EntityTypeId { get; set; }

        [JsonProperty("definition")]
        public SpellDefinition Definition { get; set; }

        [JsonProperty("prepared")]
        public object Prepared { get; set; }

        [JsonProperty("countsAsKnownSpell")]
        public bool CountsAsKnownSpell { get; set; }

        [JsonProperty("usesSpellSlot")]
        public bool UsesSpellSlot { get; set; }

        [JsonProperty("castAtLevel")]
        public object CastAtLevel { get; set; }

        [JsonProperty("alwaysPrepared")]
        public object AlwaysPrepared { get; set; }

        [JsonProperty("restriction")]
        public string Restriction { get; set; }

        [JsonProperty("spellCastingAbilityId")]
        public long SpellCastingAbilityId { get; set; }

        [JsonProperty("displayAsAttack")]
        public bool DisplayAsAttack { get; set; }

        [JsonProperty("additionalDescription")]
        public string AdditionalDescription { get; set; }

        [JsonProperty("castOnlyAsRitual")]
        public bool CastOnlyAsRitual { get; set; }

        [JsonProperty("ritualCastingType")]
        public object RitualCastingType { get; set; }

        [JsonProperty("range")]
        public DefinitionRange Range { get; set; }

        [JsonProperty("activation")]
        public Activation Activation { get; set; }

        [JsonProperty("baseLevelAtWill")]
        public bool BaseLevelAtWill { get; set; }

        [JsonProperty("atWillLimitedUseLevel")]
        public object AtWillLimitedUseLevel { get; set; }

        [JsonProperty("componentId")]
        public long ComponentId { get; set; }

        [JsonProperty("componentTypeId")]
        public long ComponentTypeId { get; set; }
    }

    public partial class Traits
    {
        [JsonProperty("personalityTraits")]
        public object PersonalityTraits { get; set; }

        [JsonProperty("ideals")]
        public object Ideals { get; set; }

        [JsonProperty("bonds")]
        public object Bonds { get; set; }

        [JsonProperty("flaws")]
        public object Flaws { get; set; }

        [JsonProperty("appearance")]
        public object Appearance { get; set; }
    }

    public partial class CharacterConfiguration
    {
        [JsonProperty("startingEquipmentType")]
        public object StartingEquipmentType { get; set; }

        [JsonProperty("abilityScoreType")]
        public long AbilityScoreType { get; set; }

        [JsonProperty("showHelpText")]
        public bool ShowHelpText { get; set; }
    }

    public partial class DDBCharacter
    {
        [JsonProperty("backgrounds")]
        public List<DefinitionElement> Backgrounds { get; set; }

        [JsonProperty("feats")]
        public List<Feat> Feats { get; set; }

        [JsonProperty("portraits")]
        public List<Frame> Portraits { get; set; }

        [JsonProperty("frames")]
        public List<Frame> Frames { get; set; }

        [JsonProperty("backdrops")]
        public List<Backdrop> Backdrops { get; set; }

        [JsonProperty("themeColors")]
        public List<ThemeColor> ThemeColors { get; set; }

        [JsonProperty("subclasses")]
        public List<Subclass> Subclasses { get; set; }
    }

    public partial class Backdrop
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("backdropAvatarId")]
        public long BackdropAvatarId { get; set; }

        [JsonProperty("smallBackdropAvatarId")]
        public long SmallBackdropAvatarId { get; set; }

        [JsonProperty("largeBackdropAvatarId")]
        public long LargeBackdropAvatarId { get; set; }

        [JsonProperty("thumbnailBackdropAvatarId")]
        public long ThumbnailBackdropAvatarId { get; set; }

        [JsonProperty("backdropAvatarUrl")]
        public Uri BackdropAvatarUrl { get; set; }

        [JsonProperty("smallBackdropAvatarUrl")]
        public Uri SmallBackdropAvatarUrl { get; set; }

        [JsonProperty("largeBackdropAvatarUrl")]
        public Uri LargeBackdropAvatarUrl { get; set; }

        [JsonProperty("thumbnailBackdropAvatarUrl")]
        public Uri ThumbnailBackdropAvatarUrl { get; set; }

        [JsonProperty("raceId")]
        public object RaceId { get; set; }

        [JsonProperty("subRaceId")]
        public object SubRaceId { get; set; }

        [JsonProperty("classId")]
        public long? ClassId { get; set; }

        [JsonProperty("tags")]
        public List<BackdropTag> Tags { get; set; }
    }

    public partial class Frame
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("frameAvatarId", NullValueHandling = NullValueHandling.Ignore)]
        public long? FrameAvatarId { get; set; }

        [JsonProperty("frameAvatarUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri FrameAvatarUrl { get; set; }

        [JsonProperty("raceId")]
        public long? RaceId { get; set; }

        [JsonProperty("subRaceId")]
        public object SubRaceId { get; set; }

        [JsonProperty("classId")]
        public object ClassId { get; set; }

        [JsonProperty("tags")]
        public List<FrameTag> Tags { get; set; }

        [JsonProperty("avatarId", NullValueHandling = NullValueHandling.Ignore)]
        public long? AvatarId { get; set; }

        [JsonProperty("avatarUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri AvatarUrl { get; set; }
    }

    public partial class ThemeColor
    {
        [JsonProperty("themeColorId")]
        public long ThemeColorId { get; set; }

        [JsonProperty("themeColor")]
        public string ThemeColorThemeColor { get; set; }

        [JsonProperty("backgroundColor")]
        public BackgroundColor BackgroundColor { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("raceId")]
        public object RaceId { get; set; }

        [JsonProperty("subRaceId")]
        public object SubRaceId { get; set; }

        [JsonProperty("classId")]
        public long? ClassId { get; set; }

        [JsonProperty("tags")]
        public List<ThemeColorTag> Tags { get; set; }
    }

    public enum AdditionalTargetDescription { CreaturesMustBeWithin30FeetOfEachOther, Empty };

    public enum AreaOfEffectDescription { Empty, SeeDescription };

    public enum ScaleType { Characterlevel, Spellscale };

    public enum DurationUnit { Hour, Minute, Round };

    public enum DurationType { Concentration, Instantaneous, Time };

    public enum ModifierFriendlyTypeName { Advantage, Bonus, Damage, Resistance };

    public enum ModifierType { Advantage, Bonus, Damage, Resistance };

    public enum AoeType { Cube, Sphere, Square };

    public enum Origin { Ranged, Self, Touch };

    public enum PrerequisiteMappingFriendlyTypeName { AbilityScore, CustomValue, Proficiency, Race, Size, Subrace };

    public enum PrerequisiteMappingType { AbilityScore, CustomValue, Proficiency, Race, Size, Subrace };

    public enum BackdropTag { ClassBackdrops, ErftlwBackdrops, GGtRBackdrops, XGtEBackdrops };

    public enum FrameTag { ERftLwFrames, GGtRFrames, XGtEFrames };

    public enum BackgroundColor { Fefefe };

    public enum ThemeColorTag { ClassThemes, ErftlwThemes, GGtRThemes };

    public partial class DDBCharacter
    {
        public static DDBCharacter FromJson(string json) => JsonConvert.DeserializeObject<DDBCharacter>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DDBCharacter self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AdditionalTargetDescriptionConverter.Singleton,
                AreaOfEffectDescriptionConverter.Singleton,
                ScaleTypeConverter.Singleton,
                DurationUnitConverter.Singleton,
                DurationTypeConverter.Singleton,
                ModifierFriendlyTypeNameConverter.Singleton,
                ModifierTypeConverter.Singleton,
                AoeTypeConverter.Singleton,
                OriginConverter.Singleton,
                PrerequisiteMappingFriendlyTypeNameConverter.Singleton,
                PrerequisiteMappingTypeConverter.Singleton,
                BackdropTagConverter.Singleton,
                FrameTagConverter.Singleton,
                BackgroundColorConverter.Singleton,
                ThemeColorTagConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AdditionalTargetDescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AdditionalTargetDescription) || t == typeof(AdditionalTargetDescription?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return AdditionalTargetDescription.Empty;
                case "Creatures must be within 30 feet of each other":
                    return AdditionalTargetDescription.CreaturesMustBeWithin30FeetOfEachOther;
            }
            throw new Exception("Cannot unmarshal type AdditionalTargetDescription");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AdditionalTargetDescription)untypedValue;
            switch (value)
            {
                case AdditionalTargetDescription.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case AdditionalTargetDescription.CreaturesMustBeWithin30FeetOfEachOther:
                    serializer.Serialize(writer, "Creatures must be within 30 feet of each other");
                    return;
            }
            throw new Exception("Cannot marshal type AdditionalTargetDescription");
        }

        public static readonly AdditionalTargetDescriptionConverter Singleton = new AdditionalTargetDescriptionConverter();
    }

    internal class AreaOfEffectDescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AreaOfEffectDescription) || t == typeof(AreaOfEffectDescription?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return AreaOfEffectDescription.Empty;
                case "(See Description)":
                    return AreaOfEffectDescription.SeeDescription;
            }
            throw new Exception("Cannot unmarshal type AreaOfEffectDescription");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AreaOfEffectDescription)untypedValue;
            switch (value)
            {
                case AreaOfEffectDescription.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case AreaOfEffectDescription.SeeDescription:
                    serializer.Serialize(writer, "(See Description)");
                    return;
            }
            throw new Exception("Cannot marshal type AreaOfEffectDescription");
        }

        public static readonly AreaOfEffectDescriptionConverter Singleton = new AreaOfEffectDescriptionConverter();
    }

    internal class ScaleTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ScaleType) || t == typeof(ScaleType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "characterlevel":
                    return ScaleType.Characterlevel;
                case "spellscale":
                    return ScaleType.Spellscale;
            }
            throw new Exception("Cannot unmarshal type ScaleType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ScaleType)untypedValue;
            switch (value)
            {
                case ScaleType.Characterlevel:
                    serializer.Serialize(writer, "characterlevel");
                    return;
                case ScaleType.Spellscale:
                    serializer.Serialize(writer, "spellscale");
                    return;
            }
            throw new Exception("Cannot marshal type ScaleType");
        }

        public static readonly ScaleTypeConverter Singleton = new ScaleTypeConverter();
    }

    internal class DurationUnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DurationUnit) || t == typeof(DurationUnit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Hour":
                    return DurationUnit.Hour;
                case "Minute":
                    return DurationUnit.Minute;
                case "Round":
                    return DurationUnit.Round;
            }
            throw new Exception("Cannot unmarshal type DurationUnit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DurationUnit)untypedValue;
            switch (value)
            {
                case DurationUnit.Hour:
                    serializer.Serialize(writer, "Hour");
                    return;
                case DurationUnit.Minute:
                    serializer.Serialize(writer, "Minute");
                    return;
                case DurationUnit.Round:
                    serializer.Serialize(writer, "Round");
                    return;
            }
            throw new Exception("Cannot marshal type DurationUnit");
        }

        public static readonly DurationUnitConverter Singleton = new DurationUnitConverter();
    }

    internal class DurationTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DurationType) || t == typeof(DurationType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Concentration":
                    return DurationType.Concentration;
                case "Instantaneous":
                    return DurationType.Instantaneous;
                case "Time":
                    return DurationType.Time;
            }
            throw new Exception("Cannot unmarshal type DurationType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DurationType)untypedValue;
            switch (value)
            {
                case DurationType.Concentration:
                    serializer.Serialize(writer, "Concentration");
                    return;
                case DurationType.Instantaneous:
                    serializer.Serialize(writer, "Instantaneous");
                    return;
                case DurationType.Time:
                    serializer.Serialize(writer, "Time");
                    return;
            }
            throw new Exception("Cannot marshal type DurationType");
        }

        public static readonly DurationTypeConverter Singleton = new DurationTypeConverter();
    }

    internal class ModifierFriendlyTypeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ModifierFriendlyTypeName) || t == typeof(ModifierFriendlyTypeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Advantage":
                    return ModifierFriendlyTypeName.Advantage;
                case "Bonus":
                    return ModifierFriendlyTypeName.Bonus;
                case "Damage":
                    return ModifierFriendlyTypeName.Damage;
                case "Resistance":
                    return ModifierFriendlyTypeName.Resistance;
            }
            throw new Exception("Cannot unmarshal type ModifierFriendlyTypeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ModifierFriendlyTypeName)untypedValue;
            switch (value)
            {
                case ModifierFriendlyTypeName.Advantage:
                    serializer.Serialize(writer, "Advantage");
                    return;
                case ModifierFriendlyTypeName.Bonus:
                    serializer.Serialize(writer, "Bonus");
                    return;
                case ModifierFriendlyTypeName.Damage:
                    serializer.Serialize(writer, "Damage");
                    return;
                case ModifierFriendlyTypeName.Resistance:
                    serializer.Serialize(writer, "Resistance");
                    return;
            }
            throw new Exception("Cannot marshal type ModifierFriendlyTypeName");
        }

        public static readonly ModifierFriendlyTypeNameConverter Singleton = new ModifierFriendlyTypeNameConverter();
    }

    internal class ModifierTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ModifierType) || t == typeof(ModifierType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "advantage":
                    return ModifierType.Advantage;
                case "bonus":
                    return ModifierType.Bonus;
                case "damage":
                    return ModifierType.Damage;
                case "resistance":
                    return ModifierType.Resistance;
            }
            throw new Exception("Cannot unmarshal type ModifierType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ModifierType)untypedValue;
            switch (value)
            {
                case ModifierType.Advantage:
                    serializer.Serialize(writer, "advantage");
                    return;
                case ModifierType.Bonus:
                    serializer.Serialize(writer, "bonus");
                    return;
                case ModifierType.Damage:
                    serializer.Serialize(writer, "damage");
                    return;
                case ModifierType.Resistance:
                    serializer.Serialize(writer, "resistance");
                    return;
            }
            throw new Exception("Cannot marshal type ModifierType");
        }

        public static readonly ModifierTypeConverter Singleton = new ModifierTypeConverter();
    }

    internal class AoeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AoeType) || t == typeof(AoeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Cube":
                    return AoeType.Cube;
                case "Sphere":
                    return AoeType.Sphere;
                case "Square":
                    return AoeType.Square;
            }
            throw new Exception("Cannot unmarshal type AoeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AoeType)untypedValue;
            switch (value)
            {
                case AoeType.Cube:
                    serializer.Serialize(writer, "Cube");
                    return;
                case AoeType.Sphere:
                    serializer.Serialize(writer, "Sphere");
                    return;
                case AoeType.Square:
                    serializer.Serialize(writer, "Square");
                    return;
            }
            throw new Exception("Cannot marshal type AoeType");
        }

        public static readonly AoeTypeConverter Singleton = new AoeTypeConverter();
    }

    internal class OriginConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Origin) || t == typeof(Origin?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ranged":
                    return Origin.Ranged;
                case "Self":
                    return Origin.Self;
                case "Touch":
                    return Origin.Touch;
            }
            throw new Exception("Cannot unmarshal type Origin");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Origin)untypedValue;
            switch (value)
            {
                case Origin.Ranged:
                    serializer.Serialize(writer, "Ranged");
                    return;
                case Origin.Self:
                    serializer.Serialize(writer, "Self");
                    return;
                case Origin.Touch:
                    serializer.Serialize(writer, "Touch");
                    return;
            }
            throw new Exception("Cannot marshal type Origin");
        }

        public static readonly OriginConverter Singleton = new OriginConverter();
    }

    internal class PrerequisiteMappingFriendlyTypeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PrerequisiteMappingFriendlyTypeName) || t == typeof(PrerequisiteMappingFriendlyTypeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ability Score":
                    return PrerequisiteMappingFriendlyTypeName.AbilityScore;
                case "Custom Value":
                    return PrerequisiteMappingFriendlyTypeName.CustomValue;
                case "Proficiency":
                    return PrerequisiteMappingFriendlyTypeName.Proficiency;
                case "Race":
                    return PrerequisiteMappingFriendlyTypeName.Race;
                case "Size":
                    return PrerequisiteMappingFriendlyTypeName.Size;
                case "Subrace":
                    return PrerequisiteMappingFriendlyTypeName.Subrace;
            }
            throw new Exception("Cannot unmarshal type PrerequisiteMappingFriendlyTypeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PrerequisiteMappingFriendlyTypeName)untypedValue;
            switch (value)
            {
                case PrerequisiteMappingFriendlyTypeName.AbilityScore:
                    serializer.Serialize(writer, "Ability Score");
                    return;
                case PrerequisiteMappingFriendlyTypeName.CustomValue:
                    serializer.Serialize(writer, "Custom Value");
                    return;
                case PrerequisiteMappingFriendlyTypeName.Proficiency:
                    serializer.Serialize(writer, "Proficiency");
                    return;
                case PrerequisiteMappingFriendlyTypeName.Race:
                    serializer.Serialize(writer, "Race");
                    return;
                case PrerequisiteMappingFriendlyTypeName.Size:
                    serializer.Serialize(writer, "Size");
                    return;
                case PrerequisiteMappingFriendlyTypeName.Subrace:
                    serializer.Serialize(writer, "Subrace");
                    return;
            }
            throw new Exception("Cannot marshal type PrerequisiteMappingFriendlyTypeName");
        }

        public static readonly PrerequisiteMappingFriendlyTypeNameConverter Singleton = new PrerequisiteMappingFriendlyTypeNameConverter();
    }

    internal class PrerequisiteMappingTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PrerequisiteMappingType) || t == typeof(PrerequisiteMappingType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ability-score":
                    return PrerequisiteMappingType.AbilityScore;
                case "custom-value":
                    return PrerequisiteMappingType.CustomValue;
                case "proficiency":
                    return PrerequisiteMappingType.Proficiency;
                case "race":
                    return PrerequisiteMappingType.Race;
                case "size":
                    return PrerequisiteMappingType.Size;
                case "subrace":
                    return PrerequisiteMappingType.Subrace;
            }
            throw new Exception("Cannot unmarshal type PrerequisiteMappingType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PrerequisiteMappingType)untypedValue;
            switch (value)
            {
                case PrerequisiteMappingType.AbilityScore:
                    serializer.Serialize(writer, "ability-score");
                    return;
                case PrerequisiteMappingType.CustomValue:
                    serializer.Serialize(writer, "custom-value");
                    return;
                case PrerequisiteMappingType.Proficiency:
                    serializer.Serialize(writer, "proficiency");
                    return;
                case PrerequisiteMappingType.Race:
                    serializer.Serialize(writer, "race");
                    return;
                case PrerequisiteMappingType.Size:
                    serializer.Serialize(writer, "size");
                    return;
                case PrerequisiteMappingType.Subrace:
                    serializer.Serialize(writer, "subrace");
                    return;
            }
            throw new Exception("Cannot marshal type PrerequisiteMappingType");
        }

        public static readonly PrerequisiteMappingTypeConverter Singleton = new PrerequisiteMappingTypeConverter();
    }

    internal class BackdropTagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BackdropTag) || t == typeof(BackdropTag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Class Backdrops":
                    return BackdropTag.ClassBackdrops;
                case "ERFTLW Backdrops":
                    return BackdropTag.ErftlwBackdrops;
                case "GGtR Backdrops":
                    return BackdropTag.GGtRBackdrops;
                case "XGtE Backdrops":
                    return BackdropTag.XGtEBackdrops;
            }
            throw new Exception("Cannot unmarshal type BackdropTag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BackdropTag)untypedValue;
            switch (value)
            {
                case BackdropTag.ClassBackdrops:
                    serializer.Serialize(writer, "Class Backdrops");
                    return;
                case BackdropTag.ErftlwBackdrops:
                    serializer.Serialize(writer, "ERFTLW Backdrops");
                    return;
                case BackdropTag.GGtRBackdrops:
                    serializer.Serialize(writer, "GGtR Backdrops");
                    return;
                case BackdropTag.XGtEBackdrops:
                    serializer.Serialize(writer, "XGtE Backdrops");
                    return;
            }
            throw new Exception("Cannot marshal type BackdropTag");
        }

        public static readonly BackdropTagConverter Singleton = new BackdropTagConverter();
    }

    internal class FrameTagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FrameTag) || t == typeof(FrameTag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ERftLW Frames":
                    return FrameTag.ERftLwFrames;
                case "GGtR Frames":
                    return FrameTag.GGtRFrames;
                case "XGtE Frames":
                    return FrameTag.XGtEFrames;
            }
            throw new Exception("Cannot unmarshal type FrameTag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FrameTag)untypedValue;
            switch (value)
            {
                case FrameTag.ERftLwFrames:
                    serializer.Serialize(writer, "ERftLW Frames");
                    return;
                case FrameTag.GGtRFrames:
                    serializer.Serialize(writer, "GGtR Frames");
                    return;
                case FrameTag.XGtEFrames:
                    serializer.Serialize(writer, "XGtE Frames");
                    return;
            }
            throw new Exception("Cannot marshal type FrameTag");
        }

        public static readonly FrameTagConverter Singleton = new FrameTagConverter();
    }

    internal class BackgroundColorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BackgroundColor) || t == typeof(BackgroundColor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "#FEFEFE")
            {
                return BackgroundColor.Fefefe;
            }
            throw new Exception("Cannot unmarshal type BackgroundColor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BackgroundColor)untypedValue;
            if (value == BackgroundColor.Fefefe)
            {
                serializer.Serialize(writer, "#FEFEFE");
                return;
            }
            throw new Exception("Cannot marshal type BackgroundColor");
        }

        public static readonly BackgroundColorConverter Singleton = new BackgroundColorConverter();
    }

    internal class ThemeColorTagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ThemeColorTag) || t == typeof(ThemeColorTag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Class Themes":
                    return ThemeColorTag.ClassThemes;
                case "ERFTLW Themes":
                    return ThemeColorTag.ErftlwThemes;
                case "GGtR Themes":
                    return ThemeColorTag.GGtRThemes;
            }
            throw new Exception("Cannot unmarshal type ThemeColorTag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ThemeColorTag)untypedValue;
            switch (value)
            {
                case ThemeColorTag.ClassThemes:
                    serializer.Serialize(writer, "Class Themes");
                    return;
                case ThemeColorTag.ErftlwThemes:
                    serializer.Serialize(writer, "ERFTLW Themes");
                    return;
                case ThemeColorTag.GGtRThemes:
                    serializer.Serialize(writer, "GGtR Themes");
                    return;
            }
            throw new Exception("Cannot marshal type ThemeColorTag");
        }

        public static readonly ThemeColorTagConverter Singleton = new ThemeColorTagConverter();
    }
}
